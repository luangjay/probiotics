// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Gender {
  Male   @map("male")
  Female @map("female")
  Others @map("others")

  @@map("genders")
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  salt      String
  email     String?
  prefix    String
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  doctor    Doctor?
  patient   Patient?
  admin     Admin?
  accounts  Account[]
  sessions  Session[]

  @@map("users")
}

model Admin {
  userId String @id @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("admins")
}

model Doctor {
  userId     String      @id @map("user_id")
  user       User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  visitDatas VisitData[]

  @@map("doctors")
}

model Patient {
  userId            String                    @id @map("user_id")
  ssn               String
  gender            Gender
  birthDate         DateTime                  @map("birth_date")
  ethnicity         String?
  user              User                      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  medicalConditions MedicalConditionPatient[]
  visitDatas        VisitData[]

  @@map("patients")
}

model Microorgranism {
  id              Int                            @id @default(autoincrement())
  name            String                         @unique
  essential       Boolean
  probiotic       Boolean
  createdAt       DateTime                       @default(now()) @map("created_at")
  updatedAt       DateTime                       @updatedAt @map("updated_at")
  probioticBrands MicroorgranismProbioticBrand[]

  @@map("microorganisms")
}

model ProbioticBrand {
  id              Int                            @id @default(autoincrement())
  name            String                         @unique
  createdAt       DateTime                       @default(now()) @map("created_at")
  updatedAt       DateTime                       @updatedAt @map("updated_at")
  microorgranisms MicroorgranismProbioticBrand[]

  @@map("probiotic_brands")
}

model MedicalCondition {
  id        Int                       @id @default(autoincrement())
  name      String                    @unique
  createdAt DateTime                  @default(now()) @map("created_at")
  updatedAt DateTime                  @updatedAt @map("updated_at")
  patients  MedicalConditionPatient[]

  @@map("medical_conditions")
}

model MicroorganismRecord {
  id            String    @id @default(cuid())
  visitDataId   String    @map("visit_data_id")
  microorganism String
  reads         Float
  visitData     VisitData @relation(fields: [visitDataId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("microorganism_records")
}

model VisitData {
  id                   String                @id @default(cuid())
  doctorId             String                @map("doctor_id")
  patientId            String                @map("patient_id")
  fileUri              String?               @map("file_uri")
  microorganismRecords MicroorganismRecord[]
  collectionDate       DateTime              @map("collection_date")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  doctor               Doctor                @relation(fields: [doctorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  patient              Patient               @relation(fields: [patientId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

  @@map("visit_datas")
}

model MicroorgranismProbioticBrand {
  id               Int            @id @default(autoincrement())
  microorganismId  Int            @map("microorganism_id")
  probioticBrandId Int            @map("probiotic_brand_id")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  microorganism    Microorgranism @relation(fields: [microorganismId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  probioticBrand   ProbioticBrand @relation(fields: [probioticBrandId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([microorganismId, probioticBrandId])
  @@map("microorganism_probiotic_brand")
}

model MedicalConditionPatient {
  id                 Int              @id @default(autoincrement())
  medicalConditionId Int              @map("medical_condition_id")
  patientId          String           @map("patient_id")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  medicalCondition   MedicalCondition @relation(fields: [medicalConditionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  patient            Patient          @relation(fields: [patientId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

  @@unique([medicalConditionId, patientId])
  @@map("medical_condition_patient")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verfication_tokens")
}
